type Selector = string | Element | Element[];
type EventHandler = (event: Event) => void;
export declare const __addEventListener: (selector: Selector, event: string, handler: EventHandler, options?: AddEventListenerOptions) => void;
export declare const __removeEventListener: (selector: Selector, event: string, handler: EventHandler) => void;
export declare const onClick: (selector: Selector, handler: EventHandler) => void;
export declare const onSubmit: (selector: Selector, handler: EventHandler) => void;
export declare const onChange: (selector: Selector, handler: EventHandler) => void;
export declare const onInput: (selector: Selector, handler: EventHandler) => void;
export declare const onFocus: (selector: Selector, handler: EventHandler) => void;
export declare const onBlur: (selector: Selector, handler: EventHandler) => void;
export declare const onKeyPress: (selector: Selector, handler: EventHandler) => void;
export declare const onKeyDown: (selector: Selector, handler: EventHandler) => void;
export declare const onKeyUp: (selector: Selector, handler: EventHandler) => void;
export declare const onMouseOver: (selector: Selector, handler: EventHandler) => void;
export declare const onMouseOut: (selector: Selector, handler: EventHandler) => void;
export declare const onMouseEnter: (selector: Selector, handler: EventHandler) => void;
export declare const onMouseLeave: (selector: Selector, handler: EventHandler) => void;
export declare const focusElement: (selector: Selector) => void;
export declare const blurElement: (selector: Selector) => void;
export declare const selectText: (selector: Selector) => void;
export {};
//# sourceMappingURL=events.d.ts.map