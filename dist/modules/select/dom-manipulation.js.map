{
  "version": 3,
  "sources": ["../../../src/modules/select/dom-manipulation.ts"],
  "sourcesContent": ["import { getElements } from \"./selectors.ts\";\n\ntype Selector = string | Element | Element[];\n\nexport const removeElements = (selector: Selector): void => {\n  const elements = Array.isArray(selector) ? selector : getElements(selector);\n  elements.forEach(item => {\n    item.remove();\n  });\n};\n\nexport const setHtml = (\n  selector: Selector,\n  htmlContentString: string\n): void => {\n  const elements = Array.isArray(selector) ? selector : getElements(selector);\n  elements.forEach(item => {\n    item.innerHTML = htmlContentString;\n  });\n};\n\nexport const getHtml = (selector: Selector): string => {\n  const elements = Array.isArray(selector) ? selector : getElements(selector);\n  return elements[0].innerHTML;\n};\n\nexport const getText = (selector: Selector): string | null => {\n  const elements = Array.isArray(selector) ? selector : getElements(selector);\n  return elements[0].textContent;\n};\n\nexport const appendHtml = (\n  selector: Selector,\n  htmlContentString: string\n): void => {\n  const elements = Array.isArray(selector) ? selector : getElements(selector);\n  elements.forEach(item => {\n    item.innerHTML += htmlContentString;\n  });\n};\n\nexport const prependHtml = (\n  selector: Selector,\n  htmlContentString: string\n): void => {\n  const elements = Array.isArray(selector) ? selector : getElements(selector);\n  elements.forEach(item => {\n    item.innerHTML = htmlContentString + item.innerHTML;\n  });\n};\n\nexport const setCss = (\n  selector: Selector,\n  property: string,\n  value: string | number\n): void => {\n  const elements = Array.isArray(selector) ? selector : getElements(selector);\n  let valueString = value;\n  elements.forEach(item => {\n    if (typeof value == \"number\") valueString = value + \"px\";\n    ((item as HTMLElement).style as any)[property] = valueString;\n  });\n};\n\nexport const toggleClass = (selector: Selector, className: string): void => {\n  const elements = Array.isArray(selector) ? selector : getElements(selector);\n  elements.forEach(item => {\n    item.classList.toggle(className);\n  });\n};\n\nexport const addClass = (selector: Selector, className: string): void => {\n  const elements = Array.isArray(selector) ? selector : getElements(selector);\n  elements.forEach(item => {\n    item.classList.add(className);\n  });\n};\n\nexport const removeClass = (selector: Selector, className: string): void => {\n  const elements = Array.isArray(selector) ? selector : getElements(selector);\n  elements.forEach(item => {\n    item.classList.remove(className);\n  });\n};\n\nexport const hasClass = (selector: Selector, className: string): boolean => {\n  const elements = Array.isArray(selector) ? selector : getElements(selector);\n  return elements[0] ? elements[0].classList.contains(className) : false;\n};\n\nexport const setText = (selector: Selector, text: string): void => {\n  const elements = Array.isArray(selector) ? selector : getElements(selector);\n  elements.forEach(item => {\n    item.textContent = text;\n  });\n};\n\nexport const cloneElements = (\n  selector: Selector,\n  deep: boolean = true\n): Element[] => {\n  const elements = Array.isArray(selector) ? selector : getElements(selector);\n  return elements.map(item => item.cloneNode(deep) as Element);\n};\n\nexport const insertBefore = (\n  selector: Selector,\n  content: string | Element\n): void => {\n  const elements = Array.isArray(selector) ? selector : getElements(selector);\n  elements.forEach(item => {\n    if (typeof content === \"string\") {\n      item.insertAdjacentHTML(\"beforebegin\", content);\n    } else {\n      item.parentNode?.insertBefore(content, item);\n    }\n  });\n};\n\nexport const insertAfter = (\n  selector: Selector,\n  content: string | Element\n): void => {\n  const elements = Array.isArray(selector) ? selector : getElements(selector);\n  elements.forEach(item => {\n    if (typeof content === \"string\") {\n      item.insertAdjacentHTML(\"afterend\", content);\n    } else {\n      item.parentNode?.insertBefore(content, item.nextSibling);\n    }\n  });\n};\n\nexport const replaceElements = (\n  selector: Selector,\n  newContent: string | Element\n): void => {\n  const elements = Array.isArray(selector) ? selector : getElements(selector);\n  elements.forEach(item => {\n    if (typeof newContent === \"string\") {\n      item.outerHTML = newContent;\n    } else {\n      item.parentNode?.replaceChild(newContent, item);\n    }\n  });\n};\n"],
  "mappings": "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",
  "names": []
}
