{
  "version": 3,
  "sources": ["../../src/modules/ssr.ts"],
  "sourcesContent": ["import fs from \"fs\";\n\nconst ESC = {\n  \"&\": \"&amp;\",\n  \"<\": \"&lt;\",\n  \">\": \"&gt;\",\n  '\"': \"&quot;\",\n  \"'\": \"&#39;\",\n};\n/**\n * Escape HTML special characters in a string.\n * @param {string} v - The input string.\n * @returns {string} - The escaped string.\n */\nexport const escapeHTML = (v: string): string =>\n  v.replace(/[&<>\"']/g, ch => ESC[ch as keyof typeof ESC]);\n\n/**\n * Flatten and join parts into a single string to return a final HTML string.\n * @param {any[]} parts - Parts to join\n * @returns {string}\n */\nexport const joinConstructos = (...parts: any[]) =>\n  parts.flat(Infinity).join(\"\");\n\nconst partials = new Map();\n/**\n * Load a partial file, caching its content for future use.\n * @param {string} fileName - Path to the partial file\n * @param {Object} [options]\n * @param {boolean} [options.verbose] - Whether to log loading info\n * @returns {string}\n */\nexport function loadPartial(\n  fileName: string,\n  options?: { verbose?: boolean }\n): string {\n  if (!partials.has(fileName)) {\n    if (options?.verbose) {\n      console.log(`Loading partial from disk: ${fileName}`);\n    }\n    partials.set(fileName, fs.readFileSync(fileName, \"utf8\"));\n  } else {\n    if (options?.verbose) {\n      console.log(`Using cached partial: ${fileName}`);\n    }\n  }\n  return partials.get(fileName);\n}\n"],
  "mappings": "AAAA,OAAO,QAAQ;AAEf,MAAM,MAAM;AAAA,EACV,KAAK;AAAA,EACL,KAAK;AAAA,EACL,KAAK;AAAA,EACL,KAAK;AAAA,EACL,KAAK;AACP;AAMO,MAAM,aAAa,CAAC,MACzB,EAAE,QAAQ,YAAY,QAAM,IAAI,EAAsB,CAAC;AAOlD,MAAM,kBAAkB,IAAI,UACjC,MAAM,KAAK,QAAQ,EAAE,KAAK,EAAE;AAE9B,MAAM,WAAW,oBAAI,IAAI;AAQlB,SAAS,YACd,UACA,SACQ;AACR,MAAI,CAAC,SAAS,IAAI,QAAQ,GAAG;AAC3B,QAAI,SAAS,SAAS;AACpB,cAAQ,IAAI,8BAA8B,QAAQ,EAAE;AAAA,IACtD;AACA,aAAS,IAAI,UAAU,GAAG,aAAa,UAAU,MAAM,CAAC;AAAA,EAC1D,OAAO;AACL,QAAI,SAAS,SAAS;AACpB,cAAQ,IAAI,yBAAyB,QAAQ,EAAE;AAAA,IACjD;AAAA,EACF;AACA,SAAO,SAAS,IAAI,QAAQ;AAC9B;",
  "names": []
}
