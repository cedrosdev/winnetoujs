/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./js/_strings.js":
/*!************************!*\
  !*** ./js/_strings.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_winnetoujs_src_winnetou_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node_modules/winnetoujs/src/winnetou.js */ "./node_modules/winnetoujs/src/winnetou.js");

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_winnetoujs_src_winnetou_js__WEBPACK_IMPORTED_MODULE_0__.Winnetou.strings = {
  /** @property Congratulations! Your winnetoujs app is health and running. */
  welcome: "Congratulations! Your winnetoujs app is health and running.",
  /** @property To start coding, edit <i>app.js</i> file and run <b>node wbr --bundleRelease</b> in your terminal. */
  text: "To start coding, edit <i>app.js</i> file and run <b>node wbr --bundleRelease</b> in your terminal."
});

/***/ }),

/***/ "./js/constructos/welcome.js":
/*!***********************************!*\
  !*** ./js/constructos/welcome.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   welcome: () => (/* binding */ welcome)
/* harmony export */ });
/* harmony import */ var _node_modules_winnetoujs_src_winnetou_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/winnetoujs/src/winnetou.js */ "./node_modules/winnetoujs/src/winnetou.js");
/* harmony import */ var _node_modules_winnetoujs_src_constructos_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../node_modules/winnetoujs/src/constructos.js */ "./node_modules/winnetoujs/src/constructos.js");



/**@private */
class welcome_ extends _node_modules_winnetoujs_src_constructos_js__WEBPACK_IMPORTED_MODULE_1__.Constructos {
  // ========================================
  /**
   * 
   * @param {object} elements
   * @param {any} elements.title  
   * @param {any} elements.text  
   * @param {object} [options]
   * @param {string} [options.identifier]
   */
  constructo = (elements, options) => {
    let identifier = this._mutableToString(options);
    identifier = this._getIdentifier(options ? identifier.identifier || 'notSet' : 'notSet');
    let elementsToString = this._mutableToString(elements);
    let component;
    let obj = {
      code(elements_) {
        return `
  <div id="welcome-win-${identifier}" class="welcome">
    <img src="./logo.svg" class="logo" >
    <h1>WinnetouJs 2</h1>
    <h2>${elements_ === null || elements_ === void 0 ? void 0 : elements_.title}</h2>
    <span class="text">${elements_ === null || elements_ === void 0 ? void 0 : elements_.text}</span>
    <p class="main_link">
      <a href="https://winnetoujs.org" target="_blank">winnetoujs.org</a>
    </p>
  </div>
`;
      },
      /**
       * Create Winnetou Constructo        
       * @param  {object|string} output The node or list of nodes where the component will be created
       * @param  {object} [options] Options to control how the construct is inserted. Optional.
       * @param  {boolean} [options.clear] Clean the node before inserting the construct
       * @param  {boolean} [options.reverse] Place the construct in front of other constructs
       * @param {object} [options.vdom] Winnetou.vdom() fragment
       * @param {boolean} [options.replace] Replace a constructo
       */

      "create": (output, options) => {
        this.create(component, output, options);
        return {
          ids: {
            welcome: `welcome-win-${identifier}`
          }
        };
      },
      constructoString: () => obj.code(elementsToString)
    };
    component = obj.code(elementsToString);
    this._saveUsingMutable(`welcome-win-${identifier}`, elements, options, welcome_);
    return obj;
  };
}
const welcome = new welcome_().constructo;

/***/ }),

/***/ "./node_modules/winnetoujs/src/constructos.js":
/*!****************************************************!*\
  !*** ./node_modules/winnetoujs/src/constructos.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Constructos: () => (/* binding */ Constructos)
/* harmony export */ });
/* harmony import */ var _winnetou_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./winnetou.js */ "./node_modules/winnetoujs/src/winnetou.js");

class Constructos {
  _mutableToString(elements) {
    if (elements) {
      let jsonElements = JSON.parse(JSON.stringify(elements));
      Object.keys(elements).forEach(item => {
        if (typeof elements[item] === "object" && elements[item] !== null) {
          let mutable = elements[item].mutable;
          let val;
          _winnetou_js__WEBPACK_IMPORTED_MODULE_0__.Winnetou.getMutable(mutable) || _winnetou_js__WEBPACK_IMPORTED_MODULE_0__.Winnetou.getMutable(mutable) === "" ? val = _winnetou_js__WEBPACK_IMPORTED_MODULE_0__.Winnetou.getMutable(mutable) : val = `Mutable "${mutable}" not initialized yet.`;

          /**
           * change mutable to string
           */
          jsonElements[item] = val;
        }
      });
      return jsonElements;
    } else {
      return elements;
    }
  }
  _saveUsingMutable(pureId, elements, options, method) {
    if (elements) {
      Object.keys(elements).forEach(item => {
        if (typeof elements[item] === "object" && elements[item] !== null) {
          if (!_winnetou_js__WEBPACK_IMPORTED_MODULE_0__.Winnetou.usingMutable[elements[item].mutable]) _winnetou_js__WEBPACK_IMPORTED_MODULE_0__.Winnetou.usingMutable[elements[item].mutable] = [];
          let obj = {
            pureId,
            elements,
            options,
            method
          };
          if (_winnetou_js__WEBPACK_IMPORTED_MODULE_0__.Winnetou.usingMutable[elements[item].mutable].filter(x => x.pureId == pureId).length > 0) {
            // do nothing
          } else {
            _winnetou_js__WEBPACK_IMPORTED_MODULE_0__.Winnetou.usingMutable[elements[item].mutable].push(obj);
          }
        }
      });
    }
    if (options) {
      Object.keys(options).forEach(item => {
        if (typeof options[item] === "object" && options[item] !== null) {
          if (!_winnetou_js__WEBPACK_IMPORTED_MODULE_0__.Winnetou.usingMutable[options[item].mutable]) _winnetou_js__WEBPACK_IMPORTED_MODULE_0__.Winnetou.usingMutable[options[item].mutable] = [];
          let obj = {
            pureId,
            elements,
            options,
            method
          };
          if (_winnetou_js__WEBPACK_IMPORTED_MODULE_0__.Winnetou.usingMutable[options[item].mutable].filter(x => x.pureId == pureId).length > 0) {
            // do nothing
          } else {
            _winnetou_js__WEBPACK_IMPORTED_MODULE_0__.Winnetou.usingMutable[options[item].mutable].push(obj);
          }
        }
      });
    }
  }

  /**
   * @protected
   * @param  {string=} identifier
   */
  _getIdentifier(identifier) {
    if (identifier != "notSet") return identifier;else return ++_winnetou_js__WEBPACK_IMPORTED_MODULE_0__.Winnetou.constructoId;
  }

  /**
   * Create Winnetou Constructo
   * @param  {string} component The component to be inserted
   * @param  {string | object} output The node or list of nodes where the component will be created
   * @param  {object} [options] Options to control how the construct is inserted. Optional.
   * @param  {boolean} [options.clear] Clean the node before inserting the construct
   * @param  {boolean} [options.reverse] Place the construct in front of other constructs
   * @param {object} [options.vdom] Winnetou.vdom() fragment
   * @param {boolean} [options.replace] Replace a constructo
   */

  create(component, output, options) {
    let frag;
    if (component.match(/^\s*?<tr|^\s*?<td|^\s*?<table|^\s*?<th|^\s*?<tbody|^\s*?<thead|^\s*?<tfoot/)) {
      let el = document.querySelectorAll(output);
      if (el.length === 0) {
        el = document.querySelectorAll("#" + output);
      }
      el.forEach(item => {
        // options
        if (options && options.clear) item.innerHTML = "";
        // @ts-ignore
        if (options && options.reverse) item.innerHTML = component + item.innerHTML;else {
          item.innerHTML += component;
        }
      });
    } else {
      frag = document.createRange().createContextualFragment(component);
      if (typeof output !== "object") {
        let el;
        if (options && options.vdom) {
          el = options.vdom.querySelectorAll(output);
          if (el.length === 0) {
            el = options.vdom.querySelectorAll("#" + output);
          }
        } else {
          el = document.querySelectorAll(output);
          if (el.length === 0) {
            el = document.querySelectorAll("#" + output);
          }
        }
        el.forEach(item => {
          if (options && options.replace) {
            _winnetou_js__WEBPACK_IMPORTED_MODULE_0__.Winnetou.replace(frag, item);
            return;
          }
          if (options && options.clear) item.innerHTML = "";
          // @ts-ignore
          if (options && options.reverse) item.prepend(frag);else {
            item.appendChild(frag);
          }
        });
      } else {
        if (options && options.clear) output.innerHTML = "";
        // @ts-ignore
        if (options && options.reverse) output.prepend(frag);else {
          output.appendChild(frag);
        }
      }
    }
  }
}

/***/ }),

/***/ "./node_modules/winnetoujs/src/winnetou.js":
/*!*************************************************!*\
  !*** ./node_modules/winnetoujs/src/winnetou.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   W: () => (/* binding */ W),
/* harmony export */   Win: () => (/* binding */ Win),
/* harmony export */   Winnetou: () => (/* binding */ Winnetou)
/* harmony export */ });
/* harmony import */ var _win_config_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../win.config.js */ "./win.config.js");
/* harmony import */ var _win_config_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_win_config_js__WEBPACK_IMPORTED_MODULE_0__);
//@ts-ignore

// import Config from "../win.config.js";

class Winnetou_ {
  constructor() {
    /**
     * Incrementally id when no specific identifier is given
     *
     * @type {number}
     */
    this.constructoId = 0;

    /**
     * Variable that stores mutables who should not have been
     * persistent when updating the application
     * @protected
     * @type {array}
     */
    this.mutable = [];

    /**
     * List of constructos that are subscribed to the mutable listener
     *
     * @type {array}
     */
    this.usingMutable = [];

    /**
     * Object that will store routes on createRoutes
     * @protected
     * @type {object}
     */
    this.routes = {};

    /**
     * Object that will store the separated routes from createRoutes
     * @protected
     * @type {array}
     */
    this.paramRoutes = [];

    /**
     * Object that provides options when createRoutes, like
     * a standard function to be called when onBack is pressed
     * @protected
     * @type {object}
     */
    this.routesOptions = {};

    /**@private */
    this.storedEvents = [];

    /**@type {object} */
    this.strings = {};

    /**
     * @type {any} 
     * @private
     * */
    this.observer;
    document.addEventListener("keydown", event => {
      if (event.which === 27) {
        history.go(-1);
      }
    });
    if (window.history) {
      window.onpopstate = event => {
        var _this$routesOptions;
        event.preventDefault();
        if (event.state == null) {
          this.routes["/"]();
        } else {
          try {
            this.callRoute(event.state);
          } catch (e) {
            console.error(`WinnetouJs Error, id: CR002\nGiven route is not available "${event.state}". Please verify given route. Original Error: ${e}`);
          }
        }
        if ((_this$routesOptions = this.routesOptions) !== null && _this$routesOptions !== void 0 && _this$routesOptions.onBack) {
          try {
            this.routesOptions.onBack();
          } catch (e) {
            console.error(`Winnetou Error, id: CR001\nThe onBack option in createRoutes() is not valid. Please use a function. \n\nOriginal Error: `, e);
          }
        }
      };
    } else {
      // $debug === "debug"
      //   ? console.log("History Api not allowed in this browser.")
      //   : null;
    }
    let theme_ = window.localStorage.getItem("theme");
    if (theme_) {
      let theme = JSON.parse(theme_);
      let root = document.documentElement;
      Object.keys(theme).forEach(function (item) {
        root.style.setProperty(item, theme[item]);
      });
    } else {}
  }

  /**
   * Sets the value of passed winnetou mutable
   * @param {string} mutable string that represents a winnetou mutable
   * @param {string} value string value to be associated to mutable
   * @param {"notPersistent"|boolean} [localStorage] bool to save the state on the machine at the user, true by default. Use 'notPersistent' to be clear (and verbose).
   */
  setMutable(mutable, value, localStorage = true) {
    if (localStorage && localStorage !== "notPersistent") {
      window.localStorage.setItem(`mutable_${mutable}`, value);
    } else {
      this.mutable[mutable] = value;
    }
    if (this.usingMutable[mutable]) {
      /**
       * if the mutable has constructos
       * copy array to tmpArr
       */
      let tmpArr = this.usingMutable[mutable];
      this.usingMutable[mutable] = [];
      tmpArr.forEach(item => {
        /**
         * go through the tmpArr to handle constructos
         */
        let old_ = document.getElementById(item.pureId);
        if (old_ == null) return;
        let a = new item.method().constructo;
        let new_ = document.createRange().createContextualFragment(a(item.elements, item.options).constructoString());
        this.replace(new_, old_);
      });
    }
  }

  /**
   * initMutable initiates a mutable with
   * unique name saving it in
   * notPersistent mode and returning it name.
   * @param {string} value The string value of
   * mutable
   * @returns {string} unique name of mutable
   */
  initMutable(value) {
    let name = (new Date().getMilliseconds() * Math.random() * 10000).toFixed(0);
    this.setMutable(name, value, "notPersistent");
    return name;
  }

  /**
   * Gets the value of passed winnetou mutable
   * @param {string} mutable string that represents a winnetou mutable
   * @returns {string|null} value or null if not exists
   */
  getMutable(mutable) {
    if (window.localStorage.getItem(`mutable_${mutable}`) || window.localStorage.getItem(`mutable_${mutable}`) === "") {
      return window.localStorage.getItem(`mutable_${mutable}`);
    } else if (this.mutable[mutable] || this.mutable[mutable] === "") {
      return this.mutable[mutable];
    } else {
      return null;
    }
  }
  mutations = {
    /**
     * Starts the entire app constructos removal watch events. This method is only called once, even if you instantiate it several times. Only works if your main app element is 'app'.
     * @returns {boolean}
     */
    start: () => {
      if (this.observer) return;
      this.observer = new MutationObserver(mutationsArray => {
        try {
          mutationsArray.forEach(MutationRecord => {
            MutationRecord.removedNodes.forEach(removedNode => {
              let removedId = removedNode instanceof Element ? removedNode.id : null;
              document.getElementById('app').dispatchEvent(new CustomEvent('constructoRemoved', {
                detail: {
                  removedId
                }
              }));
            });
          });
        } catch (e) {}
      });
      this.observer.disconnect();
      this.observer.observe(document.getElementById("app"), {
        childList: true,
        subtree: true
      });
      return true;
    },
    /**
     * Add a remove event binding to constructo
     * @param {string} id constructo id that will be watched
     * @param {function} callback the function that will be called when constructo is removed 
     * @returns {boolean}
     */
    onRemove: (id, callback) => {
      const controller = new AbortController();
      const signal = controller.signal;
      document.getElementById("app").addEventListener("constructoRemoved",
      /**
       *
       * @param {CustomEvent} data
       */
      data => {
        if (id === data.detail.removedId) {
          callback();
          controller.abort();
        }
      }, {
        signal
      });
      return true;
    },
    /**
     * Remove the main listener from app. 
     * Using this method is discouraged as 
     * it may break your app elsewhere in the code.
     * Use it at your own risk.
     */
    destroy: () => {
      setTimeout(() => {
        this.observer.disconnect();
        this.observer = null;
      }, 100);
    }
  };

  /**
   * Method to replace a constructo
   * @param {Element|DocumentFragment} new_ DOM Element
   * @param {Element|DocumentFragment} old_ DOM Element
   */
  replace(new_, old_) {
    if (old_ && old_.parentNode) {
      let ele_ = old_.parentNode;
      ele_.replaceChild(new_, old_);
    }
  }

  /**
   * Select the indicated element.
   * If selector is a class or tag and user request for
   * a get function (e.g. getScrollTop()) the returned value
   * will be of the first occurrence ([0]) of matches.
   * @param {string} selector html element. A tag, id ou class.
   */
  select(selector = "") {
    var el;
    const obj = {
      /**
       * @param {any} selector
       */
      getEl(selector) {
        if (el) return el;
        if (typeof selector == "object") {
          return [selector];
        } else {
          //
          if (selector.includes(",")) {
            return document.querySelectorAll(selector);
          }
          //
          else if (selector.match(/^\#/)) {
            selector = selector.replace("#", "");
            return [document.getElementById(selector)];
          }
          //
          else if (selector.match(/^\./)) {
            selector = selector.replace(".", "");
            return Array.from(document.getElementsByClassName(selector));
          }
          //
          else {
            if (selector.includes("-win-")) {
              selector = selector.replace("#", "");
              return [document.getElementById(selector)];
            }
            let arr = Array.from(document.getElementsByTagName(selector));
            if (arr.length === 0) {
              return [document.getElementById(selector)];
            } else {
              return arr;
            }
          }
        }
      },
      /**
       * remove constructo from the DOM
       */
      remove() {
        el.forEach(item => {
          item.remove();
        });
        return this;
      },
      /**
       * set inner html of constructo
       * @param {string} htmlContentString the html string to be inserted
       */
      html(htmlContentString) {
        el.forEach(item => {
          item.innerHTML = htmlContentString;
        });
        return this;
      },
      /**
       * get the inner html of constructo
       */
      getHtml() {
        return el[0].innerHTML;
      },
      /**
       * get inner text of constructo
       */
      getText() {
        return el[0].textContent;
      },
      /**
       * append html to the end of constructo's html
       * @param {string} htmlContentString the html string to be inserted
       */
      append(htmlContentString) {
        el.forEach(item => {
          item.innerHTML += htmlContentString;
        });
        return this;
      },
      /**
       * prepend html to the start of constructo's html
       * @param {string} htmlContentString the html string to be inserted
       */
      prepend(htmlContentString) {
        // el.innerHTML = texto + el.innerHTML;
        el.forEach(item => {
          item.innerHTML = htmlContentString + item.innerHTML;
        });
        return this;
      },
      /**
       * Changes the css of constructo or DOM component
       * @tutorial https://www.w3schools.com/JSREF/dom_obj_style.asp
       * @param {string | number} property The Style object represents an individual style statement.
       * @param {string | number} value The value. If it is a number, winnetou will assume that it's a short hand to 'px'.
       */
      css(property, value) {
        let valueString = value;
        el.forEach(item => {
          if (typeof value == "number") valueString = value + "px";
          item.style[property] = valueString;
        });
        return this;
      },
      /**
       * Add the class if not added yet, remove the class if already added.
       * @param {string} className name of class
       */
      toggleClass(className) {
        el.forEach(item => {
          item.classList.toggle(className);
        });
        return this;
      },
      /**
       * Add a class
       * @param {string} className name of class
       */
      addClass(className) {
        el.forEach(item => {
          item.classList.add(className);
        });
        return this;
      },
      /**
       * Removes a class
       * @param {string} className name of class
       */
      removeClass(className) {
        el.forEach(item => {
          item.classList.remove(className);
        });
        return this;
      },
      /**
       * Hide a constructo
       */
      hide() {
        el.forEach(item => {
          item.classList.add("winnetou_display_none");
        });
        return this;
      },
      /**
       * Show a constructo
       */
      show() {
        el.forEach(item => {
          item.classList.remove("winnetou_display_none");
          if (getComputedStyle(item).display == "none") {
            item.style.display = "initial";
          }
        });
        return this;
      },
      /**
       * Get width of a constructo
       */
      getWidth() {
        return el[0].getBoundingClientRect().width;
      },
      /**
       * Get height of a constructo
       */
      getHeight() {
        return el[0].getBoundingClientRect().height;
      },
      /**
       * Get left of a constructo
       */
      getLeft() {
        return el[0].offsetLeft;
      },
      /**
       * Get top of a constructo
       */
      getTop() {
        return el[0].offsetTop;
      },
      /**
       * Get global position of a constructo
       */
      getGlobalPosition() {
        return el[0].getBoundingClientRect();
      },
      /**
       * Get value of a constructo
       */
      getVal() {
        return el[0].value;
      },
      /**
       * Sets a value to a constructo, also fire a change event
       * @param {string} value The value.
       */
      setVal(value) {
        el.forEach(item => {
          item.value = value;
          if ("createEvent" in document) {
            var evt = document.createEvent("HTMLEvents");
            evt.initEvent("change", false, true);
            item.dispatchEvent(evt);
          } else item.fireEvent("onchange");
        });
        return this;
      },
      /**
       * Sets an attr to a constructo
       * @param  {string} attr name of attribute
       * @param  {string} value the values
       */
      setAttr(attr, value) {
        el.forEach(item => {
          item.setAttribute(attr, value);
        });
        return this;
      },
      /**
       * Gets the attr
       * @param  {string} attr attribute name
       */
      getAttr(attr) {
        return el[0].getAttribute(attr);
      },
      /**
       * Returns checked property of a constructo
       */
      isChecked() {
        return el[0].checked;
      },
      /**
       * Gets the file of a input type file
       *
       * @typedef {Object} File_
       * @property {number} lastModified
       * @property {Date} lastModifiedDate
       * @property {string} name
       * @property {number} size
       * @property {string} type
       *
       * @returns {File_}
       */
      getFile() {
        return el[0].files[0];
      },
      /**
       * Gets file array of a input type file
       *
       * @returns {Array.<File_>}
       */
      getFiles() {
        return el[0].files;
      },
      /**
       * get scrollTop of a constructo
       */
      getScrollTop() {
        return el[0].scrollTop;
      },
      disable() {
        el[0].disabled = true;
        return this;
      },
      enable() {
        el[0].disabled = false;
        return this;
      }
    };
    el = obj.getEl(selector);
    if (el[0] === null) {
      console.warn(`WinnetouJs Warning: The provided element selector (${selector}) does not exists in DOM. Winnetou is skipping this fatal error, but verify.`);
      let void_ = this.vdom();
      void_.appendChild(document.createRange().createContextualFragment("<p class='foo'>"));
      el = void_.querySelectorAll(".foo");
    }
    return obj;
  }

  /**
   * Method for store dynamic Winnetou Routes
   * @param  {object} obj
   * @param  {object} [options]
   * @param  {function=} options.onBack Function that will be called when user fires back button
   * @param  {function=} options.onGo Function that will be called when user triggers a route
   */
  createRoutes(obj, options) {
    this.routes = obj;
    this.routesOptions = options;
    Object.keys(this.routes).forEach(route => {
      let segment = route.split("/");
      let size = segment.length;
      this.paramRoutes.push({
        root: route,
        size
      });
    });
  }

  /**
   * Navigate between Winnetou routes
   * @param {string} url Path already defined in createRoutes method
   * @param {boolean} pushState To use navigate without change URL
   */
  navigate(url, pushState = true) {
    if (window.history) {
      var _this$routesOptions2;
      this.callRoute(url);
      pushState && this.pushState(url);
      if ((_this$routesOptions2 = this.routesOptions) !== null && _this$routesOptions2 !== void 0 && _this$routesOptions2.onGo) {
        try {
          this.routesOptions.onGo();
        } catch (e) {
          console.error(`Winnetou Error, id: CR001\nThe onGo option in createRoutes() is not valid. Please use a function. \n\nOriginal Error: `, e);
        }
      }
    }
  }

  /**
   * Allows WinnetouJs to pass between pages on the app.
   * Needs a valid const routes already set.
   * Do not changes URL.
   * @param {string} route function already set in createRoutes
   */
  pass(route) {
    if (window.history) {
      var _this$routesOptions3;
      this.callRoute(route);
      this.pushStateInteraction(route);
      if ((_this$routesOptions3 = this.routesOptions) !== null && _this$routesOptions3 !== void 0 && _this$routesOptions3.onGo) {
        try {
          this.routesOptions.onGo();
        } catch (e) {
          console.error(`Winnetou Error, id: CR001\nThe onGo option in createRoutes() is not valid. Please use a function. \n\nOriginal Error: `, e);
        }
      }
    } else {
      // this.debug === "debug"
      //   ? console.log("History Api not allowed in this browser.")
      //   : null;
    }
  }

  /** @private */
  pushStateInteraction(func) {
    // history.replaceState(func, null);
    history.pushState(func, "");
  }
  /** @private
   * W.navigate('/profile/azul')
   */
  callRoute(url) {
    try {
      let splittedUrl = url.split("/");
      let size = splittedUrl.length;
      let filter = this.paramRoutes.filter(data => data.size === size);
      if (filter.length === 0) {
        this.notFound();
      }
      for (let i = 0; i < filter.length; i++) {
        let root = filter[i].root.split("/");
        let correctMatch = true;
        let paramStore = [];
        for (let j = 0; j < root.length; j++) {
          if (root[j] !== splittedUrl[j]) {
            correctMatch = false;
            if (root[j].includes(":")) {
              correctMatch = true;
              paramStore.push(splittedUrl[j]);
            } else {
              correctMatch = false;
              break;
            }
          }
        }
        if (correctMatch) {
          this.routes[filter[i].root](...paramStore);
          return;
        } else if (i === filter.length - 1) {
          this.notFound();
        }
      }
    } catch (e) {
      console.log(e);
      this.notFound();
    }
  }

  /** @private */
  notFound() {
    try {
      this.routes["/404"]();
    } catch (e) {
      this.select("body").prepend(`
      
      <p onclick="Winnetou.select('.winnetouNotFoundDefault').hide()" style="width:100%;padding:15px;color:white;background-color:red;cursor:pointer;" class='winnetouNotFoundDefault'>
        Page not found. Click to close.
      </p>
      `);
    }
  }

  /** @private */
  pushState(url) {
    try {
      history.pushState(url, "", url);
    } catch (e) {
      history.pushState(url, "");
    }
  }

  /**
   * Winnetou function storage method. If you provide this, use quotes.
   * @param  {function} function_ Function to be called when event fires
   * @param  {...string} args A list of arguments comma separated
   * @example
   * ```
   let div3 = myFirstDiv(
    {
      sub_title_txt: "subtitle 3",
      title_txt: "title 3",
      onclick: Winnetou.fx(el => (el.style.color = "white"), "this"),
    },
    { identifier: "2" }
   ).create("#app").ids.myFirstDiv;
  ```
   */
  fx(function_, ...args) {
    let name = "winnetouFx" + (new Date().getMilliseconds() * Math.random() * 10000).toFixed(0);
    window[name] = function_;
    if (args[0] === 'this') return `${name}(this)`;
    if (args.length === 1) return `${name}('${args[0]}')`;
    return `${name}(${args.map(x => x === 'this' ? `this` : `'${x}'`).join(',')})`;
  }

  /**
   * Method for handle events.
   * @param  {string} event Event name, eg. 'click' or 'mouseover'
   * @param  {string} elementSelector A valid element selector
   * @param  {function} callback callback function
   */
  listen(event, elementSelector, callback) {
    try {
      let el = document.querySelector("#" + elementSelector);
      el === null || el === void 0 || el.addEventListener(event, e => {
        callback(e);
      });
    } catch (e) {
      document.querySelectorAll(elementSelector).forEach(x => {
        x.addEventListener(event, e => {
          callback(e);
        });
      });
    }
  }

  /**
   * The updateTranslation method is only called when user
   * already changed language with `changeLang()` method.
   * when this happens, an local storage variable `lang`
   * is created, changing all app language.
   * If `lang` is not defined yet, this method
   * does nothing.
   *
   * @param {object} class_ the import from _strings.js
   * @example
   * import _strings from "./_strings.js";
   * Winnetou.updateTranslations(_strings).then(() => render());
   * @returns
   */
  async updateTranslations(class_) {
    /**
     * Function to get json from API
     * @param {string} url API Endpoint
     */
    const get = url => {
      return new Promise((resolve, reject) => {
        fetch(url, {
          method: "GET"
        }).then(function (response) {
          if (response.ok) {
            return response.json();
          } else {
            return reject("Translation file not found. Code error kj438dj.");
          }
        }).then(function (data) {
          return resolve(data);
        }).catch(function (error) {
          return reject("Translation file not found. Code error kj438dssj.");
        });
      });
    };
    return new Promise(async (resolve, reject) => {
      if (!window.localStorage.getItem("lang")) return resolve(true);
      let This = class_;
      if (!((_win_config_js__WEBPACK_IMPORTED_MODULE_0___default()) !== null && (_win_config_js__WEBPACK_IMPORTED_MODULE_0___default()) !== void 0 && (_win_config_js__WEBPACK_IMPORTED_MODULE_0___default().publicPath))) {
        console.error("WinnetouJs updateTranslations Miss Configuration Error:You have to specify the public path in order to use the translations;");
        (_win_config_js__WEBPACK_IMPORTED_MODULE_0___default().publicPath) = "";
      }
      if ((_win_config_js__WEBPACK_IMPORTED_MODULE_0___default().publicPath) === "/") (_win_config_js__WEBPACK_IMPORTED_MODULE_0___default().publicPath) = "";
      let defaultLang = (_win_config_js__WEBPACK_IMPORTED_MODULE_0___default()) === null || (_win_config_js__WEBPACK_IMPORTED_MODULE_0___default()) === void 0 ? void 0 : (_win_config_js__WEBPACK_IMPORTED_MODULE_0___default().defaultLang);
      let localLang = window.localStorage.getItem("lang");
      if (localLang) defaultLang = localLang;
      let data;
      try {
        data = await get(`${(_win_config_js__WEBPACK_IMPORTED_MODULE_0___default().publicPath)}/translations/${defaultLang}.json`);
      } catch (e) {
        console.warn(`Lang error. Reloading...


The file '${(_win_config_js__WEBPACK_IMPORTED_MODULE_0___default().publicPath)}/translations/${defaultLang}.json' was not found. Did you set publicPath in win.config.js and created json translation file?`);
        window.localStorage.removeItem("lang");
        setTimeout(() => {
          // to use new cycle
          location.reload();
        }, 200);
      }

      // let file = JSON.parse(data);

      Object.keys(data).map(key => {
        let value = data[key];

        // replace all values of _strings.js object
        This[key] = value;
      });
      return resolve(true);
    });
  }

  /**
   * Change language
   * @param lang string language
   */
  changeLang(lang) {
    window.localStorage.setItem("lang", lang);
    location.reload();
  }
  /**
   * Change application css
   * @param  {object} theme New theme
   */
  newTheme(theme) {
    let root = document.documentElement;
    Object.keys(theme).forEach(function (item) {
      root.style.setProperty(item, theme[item]);
    });
    window.localStorage.setItem("theme", JSON.stringify(theme));
  }
  vdom() {
    return document.createDocumentFragment();
  }
  create(frag, output, options) {
    let el = document.querySelectorAll(output);
    if (el.length === 0) {
      el = document.querySelectorAll("#" + output);
    }
    el.forEach(item => {
      // options
      if (options && options.clear) item.innerHTML = "";
      // @ts-ignore
      if (options && options.reverse) item.prepend(frag);else {
        item.appendChild(frag);
      }
    });
  }
}
const Winnetou = new Winnetou_();
const W = Winnetou;
const Win = Winnetou;

/***/ }),

/***/ "./win.config.js":
/*!***********************!*\
  !*** ./win.config.js ***!
  \***********************/
/***/ ((module) => {

/**
 * @type {import('./interfaces').IWinConfig}
 */
const config = {
  defaultLang: "en-us",
  publicPath: "/",
  constructosPath: "./constructos",
  constructosOut: "./js/constructos",
  apps: [{
    entry: "./js/app.js",
    out: "./release"
  }],
  sass: [{
    entryFolder: "./sass",
    outFolder: "./release"
  }]
};
module.exports = config;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry needs to be wrapped in an IIFE because it needs to be in strict mode.
(() => {
"use strict";
/*!*******************!*\
  !*** ./js/app.js ***!
  \*******************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_winnetoujs_src_winnetou_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node_modules/winnetoujs/src/winnetou.js */ "./node_modules/winnetoujs/src/winnetou.js");
/* harmony import */ var _strings_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_strings.js */ "./js/_strings.js");
/* harmony import */ var _constructos_welcome_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constructos/welcome.js */ "./js/constructos/welcome.js");



_node_modules_winnetoujs_src_winnetou_js__WEBPACK_IMPORTED_MODULE_0__.Winnetou.updateTranslations(_strings_js__WEBPACK_IMPORTED_MODULE_1__["default"]).then(() => render());
async function render() {
  (0,_constructos_welcome_js__WEBPACK_IMPORTED_MODULE_2__.welcome)({
    title: _strings_js__WEBPACK_IMPORTED_MODULE_1__["default"].welcome,
    text: _strings_js__WEBPACK_IMPORTED_MODULE_1__["default"].text
  }).create("#app");
}
})();

/******/ })()
;
//# sourceMappingURL=winnetouBundle.min.js.map